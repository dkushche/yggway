#!/bin/python
"""
Utility for managing containers system
that gives access to yggdrasil network and alfis dns
via firefox browser in your host browser
"""

import os
import re
import sys
import shutil
import argparse
import subprocess


def check_submodules():
    """
    Checks alfis and yggdrasil git submodules and
    init, update them in other cases
    """

    submodules_status = subprocess.run(
        ["git", "submodule", "status"], stdout=subprocess.PIPE, check=True,
    )

    if any(clean_submodule in submodules_status.stdout
           for clean_submodule in [b"alfis\n", b"yggdrasil\n"]):

        subprocess.run(["git", "submodule", "init"], check=True)
        subprocess.run(["git", "submodule", "update"], check=True)

    print(" * Submodules prepared")


def start():
    """
    Initializes yggway subsystems and starts system
    """

    check_submodules()

    xdpy_info = subprocess.run(["xdpyinfo"], stdout=subprocess.PIPE, check=True, text=True)
    resolution = re.search(r"dimensions:    ([0-9]+)x([0-9]+) pixels", xdpy_info.stdout)
    (os.environ["DISPLAY_WIDTH"], os.environ["DISPLAY_HEIGHT"]) = resolution.groups()

    subprocess.run(["docker-compose", "config"], stdout=subprocess.DEVNULL, check=True)

    stop()

    for service in ["firefox", "alfis", "yggdrasil"]:
        os.makedirs(f"storage/{service}", exist_ok=True)

    shutil.copy("config/blockchain.db", "storage/alfis")

    subprocess.run(["docker-compose", "up", "--detach"], check=True)


def stop():
    """
    Stops system
    """

    subprocess.run(["docker-compose", "stop"], check=True)


def purge():
    """
    Clears all resources
    """

    subprocess.run(
        ["docker-compose", "down","-v", "--rmi", "all", "--remove-orphans"],
        check=True
    )
    shutil.rmtree("storage", ignore_errors=True)


def test():
    """
    Runs test container for manual debugging
    """

    start()

    subprocess.run([
            "docker", "run", "-it", "--rm",
            "--cap-add=NET_ADMIN",
            "--net", "container:firefox_interface",
            "nicolaka/netshoot"
        ],
        check=False
    )


def parse_args():
    """
    Parses of command line arguments
    """

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-u', '--start', action='store_true',
        help='Starts yggdrasil gateway. You could access to browser through localhost:5800'
    )

    parser.add_argument(
        '-d', '--stop', action='store_true',
        help='Stops gateway without removing container and configurations'
    )

    parser.add_argument(
        '-p', '--purge', action='store_true',
        help='Full cleanup of environment'
    )

    parser.add_argument(
        '-t', '--test', action='store_true',
        help='Run yggway in test mode'
    )

    args = vars(parser.parse_args())

    if not any(args.values()):
        parser.print_help()
        sys.exit(1)

    return args


def main():
    """
    Checks arguments and runs mentioned commands
    """

    args = parse_args()

    for cmd, status in args.items():
        if status is True:
            globals()[cmd]()


if __name__ == "__main__":
    main()
