#!/bin/python
"""
Utility for managing containers system
that gives access to yggdrasil network and alfis dns
via firefox browser
"""

import os
import sys
import shutil
import argparse
import subprocess


def start():
    """
    Initializes yggway subsystems and starts system
    """

    os.environ["PUID"] = subprocess.run(
        ["id", "-u"], stdout=subprocess.PIPE, check=True, text=True).stdout

    os.environ["PGID"] = subprocess.run(
        ["id", "-g"], stdout=subprocess.PIPE, check=True, text=True).stdout

    os.environ["TZ"] = subprocess.run(
        ["cat", "/etc/timezone"], stdout=subprocess.PIPE, check=True, text=True).stdout

    subprocess.run(["docker-compose", "config"], stdout=subprocess.DEVNULL, check=True)

    stop()

    for service in ["firefox", "alfis", "yggdrasil"]:
        os.makedirs(f"storage/{service}", exist_ok=True)

    shutil.copy("config/blockchain.db", "storage/alfis")
    shutil.copy("config/peers.json", "storage/yggdrasil")

    subprocess.run(["xhost", "+"], check=True)
    subprocess.run(["docker-compose", "up", "--detach"], check=True)


def stop():
    """
    Stops system
    """

    subprocess.run(["docker-compose", "stop"], check=True)


def purge():
    """
    Clears all resources
    """

    subprocess.run(
        ["docker-compose", "down","-v", "--rmi", "all", "--remove-orphans"],
        check=True
    )
    shutil.rmtree("storage", ignore_errors=True)


def test():
    """
    Runs test container for manual debugging
    """

    start()

    subprocess.run([
            "docker", "run", "-it", "--rm",
            "--cap-add=NET_ADMIN",
            "--net", "container:firefox_interface",
            "nicolaka/netshoot"
        ],
        check=False
    )


def parse_args():
    """
    Parses of command line arguments
    """

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-u', '--start', action='store_true',
        help='starts yggdrasil gateway(Mozilla window will open instantly)'
    )

    parser.add_argument(
        '-d', '--stop', action='store_true',
        help='stops gateway without removing container and configurations'
    )

    parser.add_argument(
        '-p', '--purge', action='store_true',
        help='full cleanup of environment'
    )

    parser.add_argument(
        '-t', '--test', action='store_true',
        help='run yggway in test mode'
    )

    args = vars(parser.parse_args())

    if not any(args.values()):
        parser.print_help()
        sys.exit(1)

    return args


def main():
    """
    Checks arguments and runs mentioned commands
    """

    args = parse_args()

    for cmd, status in args.items():
        if status is True:
            globals()[cmd]()


if __name__ == "__main__":
    main()
